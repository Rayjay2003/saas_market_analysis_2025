{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMn2nz9so3+MEswCdZh2Aih"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Load the CSV file (after uploading in Google Colab)\n","from google.colab import files\n","uploaded = files.upload()\n","\n","# Replace with your actual filename\n","try:\n","    df = pd.read_csv(\"top_100_saas_companies_2025.csv\")\n","    print(f\"Successfully loaded CSV with shape: {df.shape}\")\n","    print(f\"Original columns: {list(df.columns)}\")\n","except FileNotFoundError:\n","    print(\"Error: CSV file not found. Make sure the filename matches exactly.\")\n","    # Alternative: try to detect the uploaded filename\n","    if uploaded:\n","        filename = list(uploaded.keys())[0]\n","        print(f\"Trying with detected filename: {filename}\")\n","        df = pd.read_csv(filename)\n","    else:\n","        raise\n","\n","# Clean column names\n","original_columns = df.columns.tolist()\n","df.columns = [col.strip().replace(\" \", \"_\").replace(\"($)\", \"\").lower() for col in df.columns]\n","print(f\"Cleaned columns: {list(df.columns)}\")\n","\n","# Check what columns actually exist\n","print(f\"\\nAvailable columns: {df.columns.tolist()}\")\n","print(f\"Data types:\\n{df.dtypes}\")\n","\n","# Improved money conversion function with better error handling\n","def convert_money(val):\n","    if pd.isna(val):\n","        return None\n","\n","    if isinstance(val, (int, float)):\n","        return float(val)\n","\n","    if isinstance(val, str):\n","        # Remove common formatting\n","        val = val.replace(\"$\", \"\").replace(\",\", \"\").strip().upper()\n","\n","        # Handle various \"not available\" formats\n","        if val in ['N/A', 'NA', '', 'NULL', 'NONE', '-']:\n","            return None\n","\n","        try:\n","            # Handle billions\n","            if 'B' in val:\n","                return float(val.replace(\"B\", \"\")) * 1e9\n","            # Handle millions\n","            elif 'M' in val:\n","                return float(val.replace(\"M\", \"\")) * 1e6\n","            # Handle thousands\n","            elif 'K' in val:\n","                return float(val.replace(\"K\", \"\")) * 1e3\n","            else:\n","                return float(val)\n","        except ValueError:\n","            print(f\"Warning: Could not convert '{val}' to number\")\n","            return None\n","\n","    return None\n","\n","# Check if required columns exist before processing\n","required_columns = ['valuation', 'arr', 'company_name', 'country']\n","missing_columns = [col for col in required_columns if col not in df.columns]\n","\n","if missing_columns:\n","    print(f\"\\nWarning: Missing expected columns: {missing_columns}\")\n","    print(\"Available columns that might be alternatives:\")\n","    for col in df.columns:\n","        print(f\"  - {col}\")\n","\n","    # Try to find similar column names\n","    import difflib\n","    for missing_col in missing_columns:\n","        matches = difflib.get_close_matches(missing_col, df.columns, n=3, cutoff=0.6)\n","        if matches:\n","            print(f\"Possible matches for '{missing_col}': {matches}\")\n","\n","# Convert monetary columns if they exist\n","if 'valuation' in df.columns:\n","    print(f\"\\nProcessing valuation column...\")\n","    print(f\"Sample valuation values before conversion: {df['valuation'].head().tolist()}\")\n","    df['valuation'] = df['valuation'].apply(convert_money)\n","    print(f\"Sample valuation values after conversion: {df['valuation'].head().tolist()}\")\n","\n","if 'arr' in df.columns:\n","    print(f\"\\nProcessing ARR column...\")\n","    print(f\"Sample ARR values before conversion: {df['arr'].head().tolist()}\")\n","    df['arr'] = df['arr'].apply(convert_money)\n","    print(f\"Sample ARR values after conversion: {df['arr'].head().tolist()}\")\n","\n","# Check data before dropping rows\n","print(f\"\\nData summary before cleaning:\")\n","print(f\"Total rows: {len(df)}\")\n","for col in required_columns:\n","    if col in df.columns:\n","        null_count = df[col].isna().sum()\n","        print(f\"Null values in {col}: {null_count}\")\n","\n","# Only drop rows with missing critical values if columns exist\n","existing_critical_columns = [col for col in required_columns if col in df.columns]\n","if existing_critical_columns:\n","    initial_rows = len(df)\n","    df.dropna(subset=existing_critical_columns, inplace=True)\n","    final_rows = len(df)\n","    print(f\"\\nDropped {initial_rows - final_rows} rows with missing critical values\")\n","    print(f\"Final dataset has {final_rows} rows\")\n","\n","# Reset index\n","df.reset_index(drop=True, inplace=True)\n","\n","# Display final results\n","print(f\"\\nFinal dataset info:\")\n","print(f\"Shape: {df.shape}\")\n","print(f\"Columns: {list(df.columns)}\")\n","if len(df) > 0:\n","    print(f\"\\nFirst few rows:\")\n","    print(df.head())\n","\n","    # Summary statistics for numeric columns\n","    numeric_cols = df.select_dtypes(include=[np.number]).columns\n","    if not numeric_cols.empty:\n","        print(f\"\\nSummary statistics:\")\n","        print(df[numeric_cols].describe())\n","else:\n","    print(\"Warning: No data remaining after cleaning!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"P5ITKV9VZ0Lc","executionInfo":{"status":"ok","timestamp":1749299988953,"user_tz":-60,"elapsed":9309,"user":{"displayName":"Raymond Fafi","userId":"10559011150651827011"}},"outputId":"c233848e-91aa-419f-c0b8-f34c5a98fc87"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-47bb2f1b-4684-41ff-be6e-1a72f80d7bc7\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-47bb2f1b-4684-41ff-be6e-1a72f80d7bc7\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving top_100_saas_companies_2025.csv to top_100_saas_companies_2025 (1).csv\n","Successfully loaded CSV with shape: (100, 11)\n","Original columns: ['Company Name', 'Founded Year', 'HQ', 'Industry', 'Total Funding', 'ARR', 'Valuation', 'Employees', 'Top Investors', 'Product', 'G2 Rating']\n","Cleaned columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","\n","Available columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","Data types:\n","company_name      object\n","founded_year       int64\n","hq                object\n","industry          object\n","total_funding     object\n","arr               object\n","valuation         object\n","employees         object\n","top_investors     object\n","product           object\n","g2_rating        float64\n","dtype: object\n","\n","Warning: Missing expected columns: ['country']\n","Available columns that might be alternatives:\n","  - company_name\n","  - founded_year\n","  - hq\n","  - industry\n","  - total_funding\n","  - arr\n","  - valuation\n","  - employees\n","  - top_investors\n","  - product\n","  - g2_rating\n","\n","Processing valuation column...\n","Sample valuation values before conversion: ['$3T', '$227.8B', '$240B', '$350B', '$215B']\n","Warning: Could not convert '3T' to number\n","Warning: Could not convert '27.7B (SALESFORCE)' to number\n","Warning: Could not convert '20B (ADOBE)' to number\n","Warning: Could not convert '28B (CISCO)' to number\n","Warning: Could not convert '3B (TWILIO)' to number\n","Warning: Could not convert '12B (INTUIT)' to number\n","Warning: Could not convert '3.2B (TWILIO)' to number\n","Warning: Could not convert '6.5B (OKTA)' to number\n","Warning: Could not convert '2.6B (GOOGLE)' to number\n","Warning: Could not convert '8B (THOMA BRAVO)' to number\n","Warning: Could not convert '8.4B (VISTA/BLACKSTONE)' to number\n","Warning: Could not convert '12.5B (SILVER LAKE)' to number\n","Warning: Could not convert '3.7B (CISCO)' to number\n","Sample valuation values after conversion: [nan, 227800000000.0, 240000000000.0, 350000000000.0, 215000000000.0]\n","\n","Processing ARR column...\n","Sample ARR values before conversion: ['$270B', '$37.9B', '$19.4B', '$52.9B', '$32.5B']\n","Sample ARR values after conversion: [270000000000.0, 37900000000.0, 19400000000.0, 52900000000.0, 32500000000.0]\n","\n","Data summary before cleaning:\n","Total rows: 100\n","Null values in valuation: 13\n","Null values in arr: 0\n","Null values in company_name: 0\n","\n","Dropped 13 rows with missing critical values\n","Final dataset has 87 rows\n","\n","Final dataset info:\n","Shape: (87, 11)\n","Columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","\n","First few rows:\n","  company_name  founded_year                      hq               industry  \\\n","0   Salesforce          1999  San Francisco, CA, USA                    CRM   \n","1        Adobe          1982       San Jose, CA, USA      Creative Software   \n","2       Oracle          1977         Austin, TX, USA  Database & Enterprise   \n","3          SAP          1972       Walldorf, Germany    Enterprise Software   \n","4       Intuit          1983  Mountain View, CA, USA     Financial Software   \n","\n","  total_funding           arr     valuation employees  \\\n","0        $65.4M  3.790000e+10  2.278000e+11    75,000   \n","1         $2.5M  1.940000e+10  2.400000e+11    29,945   \n","2           $2K  5.290000e+10  3.500000e+11   143,000   \n","3           NaN  3.250000e+10  2.150000e+11   107,415   \n","4         $273M  1.440000e+10  1.800000e+11    18,200   \n","\n","                      top_investors                         product  g2_rating  \n","0       Halsey Minor, Larry Ellison      Sales Cloud, Service Cloud        4.3  \n","1                 Hambrecht & Quist  Creative Cloud, Document Cloud        4.5  \n","2          Larry Ellison, Bob Miner          Oracle Cloud, NetSuite        4.0  \n","3       Dietmar Hopp, Klaus Tschira         S/4HANA, SuccessFactors        4.1  \n","4  Sierra Ventures, Kleiner Perkins            QuickBooks, TurboTax        4.4  \n","\n","Summary statistics:\n","       founded_year           arr     valuation  g2_rating\n","count     87.000000  8.700000e+01  8.700000e+01  87.000000\n","mean    2008.321839  3.468149e+09  3.320977e+10   4.432184\n","std        7.719643  8.223784e+09  5.993760e+10   0.176855\n","min     1972.000000  1.000000e+08  1.050000e+09   4.000000\n","25%     2006.500000  4.000000e+08  5.850000e+09   4.300000\n","50%     2010.000000  7.360000e+08  9.500000e+09   4.400000\n","75%     2012.000000  2.200000e+09  2.900000e+10   4.550000\n","max     2019.000000  5.290000e+10  3.500000e+11   4.800000\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","\n","# Set style\n","sns.set_style(\"whitegrid\")\n","\n","# Check if dataframe exists and has data\n","try:\n","    print(f\"DataFrame shape: {df.shape}\")\n","    print(f\"Columns available: {list(df.columns)}\")\n","    print(f\"Data types:\\n{df.dtypes}\")\n","except NameError:\n","    print(\"Error: DataFrame 'df' not found. Make sure to run the data loading code first.\")\n","    raise\n","\n","# Check required columns\n","required_columns = ['country', 'company_name', 'valuation', 'arr']\n","missing_columns = [col for col in required_columns if col not in df.columns]\n","\n","if missing_columns:\n","    print(f\"Missing columns: {missing_columns}\")\n","    print(\"Available columns:\", list(df.columns))\n","    # Try to suggest alternatives\n","    import difflib\n","    for missing_col in missing_columns:\n","        matches = difflib.get_close_matches(missing_col, df.columns, n=3, cutoff=0.6)\n","        if matches:\n","            print(f\"Possible matches for '{missing_col}': {matches}\")\n","\n","# 1. TOP COUNTRIES ANALYSIS\n","print(\"\\n=== TOP COUNTRIES ANALYSIS ===\")\n","if 'country' in df.columns:\n","    # Clean country data\n","    df_countries = df[df['country'].notna()].copy()\n","    print(f\"Countries with data: {len(df_countries)} rows\")\n","\n","    if len(df_countries) > 0:\n","        top_countries = df_countries['country'].value_counts().head(10)\n","        print(f\"Top countries:\\n{top_countries}\")\n","\n","        plt.figure(figsize=(12, 8))\n","        sns.barplot(x=top_countries.values, y=top_countries.index, palette='coolwarm')\n","        plt.title(\"Top 10 Countries by Number of SaaS Companies\", fontsize=16, pad=20)\n","        plt.xlabel(\"Number of Companies\", fontsize=12)\n","        plt.ylabel(\"Country\", fontsize=12)\n","\n","        # Add value labels on bars\n","        for i, v in enumerate(top_countries.values):\n","            plt.text(v + 0.1, i, str(v), va='center', fontsize=10)\n","\n","        plt.tight_layout()\n","        plt.show()\n","    else:\n","        print(\"No country data available for visualization\")\n","else:\n","    print(\"Column 'country' not found in dataset\")\n","\n","# 2. TOP COMPANIES BY VALUATION\n","print(\"\\n=== TOP VALUATIONS ANALYSIS ===\")\n","if 'valuation' in df.columns and 'company_name' in df.columns:\n","    # Clean valuation data\n","    df_valuations = df[(df['valuation'].notna()) & (df['company_name'].notna())].copy()\n","    print(f\"Companies with valuation data: {len(df_valuations)} rows\")\n","\n","    if len(df_valuations) > 0:\n","        # Sort by valuation\n","        top_valuations = df_valuations.sort_values(by='valuation', ascending=False).head(10)\n","        print(f\"Top valuations:\\n{top_valuations[['company_name', 'valuation']].head()}\")\n","\n","        plt.figure(figsize=(14, 8))\n","        sns.barplot(data=top_valuations, x='valuation', y='company_name', palette='viridis')\n","        plt.title(\"Top 10 SaaS Companies by Valuation\", fontsize=16, pad=20)\n","        plt.xlabel(\"Valuation ($)\", fontsize=12)\n","        plt.ylabel(\"Company\", fontsize=12)\n","\n","        # Format x-axis labels for better readability\n","        ax = plt.gca()\n","        ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e9:.1f}B' if x >= 1e9 else f'${x/1e6:.0f}M'))\n","\n","        # Add value labels on bars\n","        for i, v in enumerate(top_valuations['valuation'].values):\n","            if v >= 1e9:\n","                label = f'${v/1e9:.1f}B'\n","            else:\n","                label = f'${v/1e6:.0f}M'\n","            plt.text(v + max(top_valuations['valuation']) * 0.01, i, label, va='center', fontsize=9)\n","\n","        plt.tight_layout()\n","        plt.show()\n","    else:\n","        print(\"No valuation data available for visualization\")\n","else:\n","    missing = [col for col in ['valuation', 'company_name'] if col not in df.columns]\n","    print(f\"Missing columns for valuation analysis: {missing}\")\n","\n","# 3. ARR VS VALUATION SCATTER PLOT\n","print(\"\\n=== ARR VS VALUATION ANALYSIS ===\")\n","if all(col in df.columns for col in ['arr', 'valuation', 'country']):\n","    # Clean data for scatter plot\n","    df_scatter = df[(df['arr'].notna()) & (df['valuation'].notna()) & (df['country'].notna())].copy()\n","    print(f\"Companies with complete ARR/Valuation/Country data: {len(df_scatter)} rows\")\n","\n","    if len(df_scatter) >= 2:  # Need at least 2 points for a scatter plot\n","        print(f\"ARR range: ${df_scatter['arr'].min()/1e6:.1f}M to ${df_scatter['arr'].max()/1e6:.1f}M\")\n","        print(f\"Valuation range: ${df_scatter['valuation'].min()/1e9:.1f}B to ${df_scatter['valuation'].max()/1e9:.1f}B\")\n","\n","        plt.figure(figsize=(12, 8))\n","\n","        # Limit countries in legend if too many\n","        unique_countries = df_scatter['country'].nunique()\n","        if unique_countries > 15:\n","            # Show only top 10 countries by count, group others as \"Other\"\n","            top_10_countries = df_scatter['country'].value_counts().head(10).index\n","            df_scatter_plot = df_scatter.copy()\n","            df_scatter_plot.loc[~df_scatter_plot['country'].isin(top_10_countries), 'country'] = 'Other'\n","        else:\n","            df_scatter_plot = df_scatter\n","\n","        sns.scatterplot(data=df_scatter_plot, x='arr', y='valuation', hue='country',\n","                       alpha=0.7, s=60)\n","\n","        plt.title(\"ARR vs. Valuation by Country\", fontsize=16, pad=20)\n","        plt.xlabel(\"ARR ($)\", fontsize=12)\n","        plt.ylabel(\"Valuation ($)\", fontsize=12)\n","\n","        # Format axis labels\n","        ax = plt.gca()\n","        ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.0f}M'))\n","        ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e9:.1f}B' if x >= 1e9 else f'${x/1e6:.0f}M'))\n","\n","        # Position legend outside plot\n","        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=10)\n","        plt.tight_layout()\n","        plt.show()\n","\n","        # Calculate and display correlation\n","        correlation = df_scatter['arr'].corr(df_scatter['valuation'])\n","        print(f\"Correlation between ARR and Valuation: {correlation:.3f}\")\n","\n","    else:\n","        print(\"Insufficient data points for scatter plot (need at least 2)\")\n","else:\n","    missing = [col for col in ['arr', 'valuation', 'country'] if col not in df.columns]\n","    print(f\"Missing columns for ARR vs Valuation analysis: {missing}\")\n","\n","# Additional data quality summary\n","print(\"\\n=== DATA QUALITY SUMMARY ===\")\n","print(f\"Total rows in dataset: {len(df)}\")\n","for col in ['country', 'company_name', 'valuation', 'arr']:\n","    if col in df.columns:\n","        non_null = df[col].notna().sum()\n","        print(f\"{col}: {non_null}/{len(df)} non-null values ({non_null/len(df)*100:.1f}%)\")\n","    else:\n","        print(f\"{col}: Column not found\")\n","\n","# Show sample of the data for verification\n","if len(df) > 0:\n","    print(f\"\\nSample data:\")\n","    print(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"7gZddofgaJWl","executionInfo":{"status":"ok","timestamp":1749300135720,"user_tz":-60,"elapsed":783,"user":{"displayName":"Raymond Fafi","userId":"10559011150651827011"}},"outputId":"45dc7193-c9c9-400a-b282-96f52ba97a2b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["DataFrame shape: (87, 11)\n","Columns available: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","Data types:\n","company_name      object\n","founded_year       int64\n","hq                object\n","industry          object\n","total_funding     object\n","arr              float64\n","valuation        float64\n","employees         object\n","top_investors     object\n","product           object\n","g2_rating        float64\n","dtype: object\n","Missing columns: ['country']\n","Available columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","\n","=== TOP COUNTRIES ANALYSIS ===\n","Column 'country' not found in dataset\n","\n","=== TOP VALUATIONS ANALYSIS ===\n","Companies with valuation data: 87 rows\n","Top valuations:\n","  company_name     valuation\n","2       Oracle  3.500000e+11\n","1        Adobe  2.400000e+11\n","0   Salesforce  2.278000e+11\n","3          SAP  2.150000e+11\n","4       Intuit  1.800000e+11\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-7-ef97d0bc7a51>:73: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(data=top_valuations, x='valuation', y='company_name', palette='viridis')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","=== ARR VS VALUATION ANALYSIS ===\n","Missing columns for ARR vs Valuation analysis: ['country']\n","\n","=== DATA QUALITY SUMMARY ===\n","Total rows in dataset: 87\n","country: Column not found\n","company_name: 87/87 non-null values (100.0%)\n","valuation: 87/87 non-null values (100.0%)\n","arr: 87/87 non-null values (100.0%)\n","\n","Sample data:\n","  company_name  founded_year                      hq               industry  \\\n","0   Salesforce          1999  San Francisco, CA, USA                    CRM   \n","1        Adobe          1982       San Jose, CA, USA      Creative Software   \n","2       Oracle          1977         Austin, TX, USA  Database & Enterprise   \n","3          SAP          1972       Walldorf, Germany    Enterprise Software   \n","4       Intuit          1983  Mountain View, CA, USA     Financial Software   \n","\n","  total_funding           arr     valuation employees  \\\n","0        $65.4M  3.790000e+10  2.278000e+11    75,000   \n","1         $2.5M  1.940000e+10  2.400000e+11    29,945   \n","2           $2K  5.290000e+10  3.500000e+11   143,000   \n","3           NaN  3.250000e+10  2.150000e+11   107,415   \n","4         $273M  1.440000e+10  1.800000e+11    18,200   \n","\n","                      top_investors                         product  g2_rating  \n","0       Halsey Minor, Larry Ellison      Sales Cloud, Service Cloud        4.3  \n","1                 Hambrecht & Quist  Creative Cloud, Document Cloud        4.5  \n","2          Larry Ellison, Bob Miner          Oracle Cloud, NetSuite        4.0  \n","3       Dietmar Hopp, Klaus Tschira         S/4HANA, SuccessFactors        4.1  \n","4  Sierra Ventures, Kleiner Perkins            QuickBooks, TurboTax        4.4  \n"]}]},{"cell_type":"code","source":["print(f\"Total Companies: {df.shape[0]}\")\n","print(\"\\nColumns:\\n\", df.columns.tolist())\n","print(\"\\nMissing values per column:\\n\", df.isnull().sum())\n","df.describe(include='all')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":762},"id":"ADogQJEvauXA","executionInfo":{"status":"ok","timestamp":1749300212961,"user_tz":-60,"elapsed":299,"user":{"displayName":"Raymond Fafi","userId":"10559011150651827011"}},"outputId":"196bbc26-a20c-49f5-ee7c-f3707d1f9d03"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Companies: 87\n","\n","Columns:\n"," ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","\n","Missing values per column:\n"," company_name     0\n","founded_year     0\n","hq               0\n","industry         0\n","total_funding    1\n","arr              0\n","valuation        0\n","employees        0\n","top_investors    0\n","product          0\n","g2_rating        0\n","dtype: int64\n"]},{"output_type":"execute_result","data":{"text/plain":["       company_name  founded_year                      hq         industry  \\\n","count            87     87.000000                      87               87   \n","unique           87           NaN                      29               76   \n","top      Salesforce           NaN  San Francisco, CA, USA  Work Management   \n","freq              1           NaN                      34                2   \n","mean            NaN   2008.321839                     NaN              NaN   \n","std             NaN      7.719643                     NaN              NaN   \n","min             NaN   1972.000000                     NaN              NaN   \n","25%             NaN   2006.500000                     NaN              NaN   \n","50%             NaN   2010.000000                     NaN              NaN   \n","75%             NaN   2012.000000                     NaN              NaN   \n","max             NaN   2019.000000                     NaN              NaN   \n","\n","       total_funding           arr     valuation employees  \\\n","count             86  8.700000e+01  8.700000e+01        87   \n","unique            79           NaN           NaN        55   \n","top            $1.4B           NaN           NaN     2,500   \n","freq               4           NaN           NaN         7   \n","mean             NaN  3.468149e+09  3.320977e+10       NaN   \n","std              NaN  8.223784e+09  5.993760e+10       NaN   \n","min              NaN  1.000000e+08  1.050000e+09       NaN   \n","25%              NaN  4.000000e+08  5.850000e+09       NaN   \n","50%              NaN  7.360000e+08  9.500000e+09       NaN   \n","75%              NaN  2.200000e+09  2.900000e+10       NaN   \n","max              NaN  5.290000e+10  3.500000e+11       NaN   \n","\n","                top_investors                  product  g2_rating  \n","count                      87                       87  87.000000  \n","unique                     86                       84        NaN  \n","top     ICONIQ, Goldman Sachs  Cloud Security Platform        NaN  \n","freq                        2                        2        NaN  \n","mean                      NaN                      NaN   4.432184  \n","std                       NaN                      NaN   0.176855  \n","min                       NaN                      NaN   4.000000  \n","25%                       NaN                      NaN   4.300000  \n","50%                       NaN                      NaN   4.400000  \n","75%                       NaN                      NaN   4.550000  \n","max                       NaN                      NaN   4.800000  "],"text/html":["\n","  <div id=\"df-c52397b8-399c-47c6-9756-0ba38b2f3f6e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>company_name</th>\n","      <th>founded_year</th>\n","      <th>hq</th>\n","      <th>industry</th>\n","      <th>total_funding</th>\n","      <th>arr</th>\n","      <th>valuation</th>\n","      <th>employees</th>\n","      <th>top_investors</th>\n","      <th>product</th>\n","      <th>g2_rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>87</td>\n","      <td>87.000000</td>\n","      <td>87</td>\n","      <td>87</td>\n","      <td>86</td>\n","      <td>8.700000e+01</td>\n","      <td>8.700000e+01</td>\n","      <td>87</td>\n","      <td>87</td>\n","      <td>87</td>\n","      <td>87.000000</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>87</td>\n","      <td>NaN</td>\n","      <td>29</td>\n","      <td>76</td>\n","      <td>79</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>55</td>\n","      <td>86</td>\n","      <td>84</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Salesforce</td>\n","      <td>NaN</td>\n","      <td>San Francisco, CA, USA</td>\n","      <td>Work Management</td>\n","      <td>$1.4B</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2,500</td>\n","      <td>ICONIQ, Goldman Sachs</td>\n","      <td>Cloud Security Platform</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>34</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>NaN</td>\n","      <td>2008.321839</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.468149e+09</td>\n","      <td>3.320977e+10</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.432184</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>NaN</td>\n","      <td>7.719643</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>8.223784e+09</td>\n","      <td>5.993760e+10</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.176855</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>NaN</td>\n","      <td>1972.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.000000e+08</td>\n","      <td>1.050000e+09</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>NaN</td>\n","      <td>2006.500000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.000000e+08</td>\n","      <td>5.850000e+09</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>NaN</td>\n","      <td>2010.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7.360000e+08</td>\n","      <td>9.500000e+09</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.400000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>NaN</td>\n","      <td>2012.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2.200000e+09</td>\n","      <td>2.900000e+10</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.550000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>NaN</td>\n","      <td>2019.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5.290000e+10</td>\n","      <td>3.500000e+11</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.800000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c52397b8-399c-47c6-9756-0ba38b2f3f6e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c52397b8-399c-47c6-9756-0ba38b2f3f6e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c52397b8-399c-47c6-9756-0ba38b2f3f6e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-81a1c5ca-000a-4960-80bf-287e6c82f80a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81a1c5ca-000a-4960-80bf-287e6c82f80a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-81a1c5ca-000a-4960-80bf-287e6c82f80a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"company_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"87\",\n          \"Salesforce\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"founded_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 906.3990727691041,\n        \"min\": 7.719643100669282,\n        \"max\": 2019.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2008.3218390804598,\n          2010.0,\n          87.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hq\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          29,\n          \"34\",\n          \"87\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          76,\n          \"2\",\n          \"87\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_funding\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          79,\n          \"4\",\n          \"86\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18146803782.492397,\n        \"min\": 87.0,\n        \"max\": 52900000000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3468149425.2873564,\n          736000000.0,\n          87.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valuation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118518933449.73982,\n        \"min\": 87.0,\n        \"max\": 350000000000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          33209770114.942528,\n          9500000000.0,\n          87.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employees\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          55,\n          \"7\",\n          \"87\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top_investors\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          86,\n          \"2\",\n          \"87\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          84,\n          \"2\",\n          \"87\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"g2_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.450857100916423,\n        \"min\": 0.17685511931072295,\n        \"max\": 87.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.432183908045976,\n          4.4,\n          87.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Check if dataframe exists\n","try:\n","    print(f\"DataFrame info: {df.shape[0]} rows, {df.shape[1]} columns\")\n","    print(f\"Available columns: {list(df.columns)}\")\n","except NameError:\n","    print(\"Error: DataFrame 'df' not found. Please run the data loading code first.\")\n","    raise\n","\n","# Function to format currency values\n","def format_currency(value):\n","    if pd.isna(value):\n","        return \"N/A\"\n","    if value >= 1e9:\n","        return f\"${value/1e9:.2f}B\"\n","    elif value >= 1e6:\n","        return f\"${value/1e6:.1f}M\"\n","    elif value >= 1e3:\n","        return f\"${value/1e3:.1f}K\"\n","    else:\n","        return f\"${value:.0f}\"\n","\n","# 1. TOP 5 MOST VALUABLE SAAS COMPANIES\n","print(\"=\" * 60)\n","print(\"TOP 5 MOST VALUABLE SAAS COMPANIES\")\n","print(\"=\" * 60)\n","\n","if 'valuation' in df.columns and 'company_name' in df.columns:\n","    # Filter for companies with valid valuation data\n","    valid_valuations = df[(df['valuation'].notna()) & (df['company_name'].notna())].copy()\n","\n","    if len(valid_valuations) > 0:\n","        # Sort by valuation\n","        top_valuations = valid_valuations[['company_name', 'valuation']].sort_values(\n","            by='valuation', ascending=False\n","        ).head(5)\n","\n","        print(f\"Companies with valuation data: {len(valid_valuations)}\")\n","        print()\n","\n","        # Display with formatted currency\n","        for idx, (_, row) in enumerate(top_valuations.iterrows(), 1):\n","            company = row['company_name']\n","            valuation = format_currency(row['valuation'])\n","            print(f\"{idx}. {company:<30} {valuation}\")\n","\n","        # Also show the raw dataframe for reference\n","        print(f\"\\nRaw data:\")\n","        print(top_valuations.to_string(index=False))\n","\n","    else:\n","        print(\"No companies with valid valuation data found.\")\n","\n","else:\n","    missing_cols = []\n","    if 'valuation' not in df.columns:\n","        missing_cols.append('valuation')\n","    if 'company_name' not in df.columns:\n","        missing_cols.append('company_name')\n","    print(f\"Missing required columns: {missing_cols}\")\n","    print(\"Available columns:\", list(df.columns))\n","\n","# 2. TOP 5 COMPANIES BY ARR\n","print(\"\\n\" + \"=\" * 60)\n","print(\"TOP 5 COMPANIES BY ARR\")\n","print(\"=\" * 60)\n","\n","if 'arr' in df.columns and 'company_name' in df.columns:\n","    # Filter for companies with valid ARR data\n","    valid_arr = df[(df['arr'].notna()) & (df['company_name'].notna())].copy()\n","\n","    if len(valid_arr) > 0:\n","        # Sort by ARR\n","        top_arr = valid_arr[['company_name', 'arr']].sort_values(\n","            by='arr', ascending=False\n","        ).head(5)\n","\n","        print(f\"Companies with ARR data: {len(valid_arr)}\")\n","        print()\n","\n","        # Display with formatted currency\n","        for idx, (_, row) in enumerate(top_arr.iterrows(), 1):\n","            company = row['company_name']\n","            arr_value = format_currency(row['arr'])\n","            print(f\"{idx}. {company:<30} {arr_value}\")\n","\n","        # Also show the raw dataframe for reference\n","        print(f\"\\nRaw data:\")\n","        print(top_arr.to_string(index=False))\n","\n","    else:\n","        print(\"No companies with valid ARR data found.\")\n","\n","else:\n","    missing_cols = []\n","    if 'arr' not in df.columns:\n","        missing_cols.append('arr')\n","    if 'company_name' not in df.columns:\n","        missing_cols.append('company_name')\n","    print(f\"Missing required columns: {missing_cols}\")\n","\n","# 3. TOP COUNTRIES BY NUMBER OF COMPANIES\n","print(\"\\n\" + \"=\" * 60)\n","print(\"TOP COUNTRIES BY NUMBER OF COMPANIES\")\n","print(\"=\" * 60)\n","\n","if 'country' in df.columns:\n","    # Filter for rows with valid country data\n","    valid_countries = df[df['country'].notna()].copy()\n","\n","    if len(valid_countries) > 0:\n","        country_counts = valid_countries['country'].value_counts().head(10)\n","\n","        print(f\"Companies with country data: {len(valid_countries)}\")\n","        print(f\"Unique countries: {valid_countries['country'].nunique()}\")\n","        print()\n","\n","        # Display formatted results\n","        for idx, (country, count) in enumerate(country_counts.items(), 1):\n","            percentage = (count / len(valid_countries)) * 100\n","            print(f\"{idx:2d}. {country:<25} {count:3d} companies ({percentage:5.1f}%)\")\n","\n","        # Show raw data\n","        print(f\"\\nRaw data:\")\n","        print(country_counts.to_string())\n","\n","    else:\n","        print(\"No companies with valid country data found.\")\n","\n","else:\n","    print(\"Column 'country' not found in dataset\")\n","    print(\"Available columns:\", list(df.columns))\n","\n","# 4. ADDITIONAL DATA QUALITY INSIGHTS\n","print(\"\\n\" + \"=\" * 60)\n","print(\"DATA QUALITY SUMMARY\")\n","print(\"=\" * 60)\n","\n","# Check for data completeness\n","key_columns = ['company_name', 'valuation', 'arr', 'country']\n","existing_columns = [col for col in key_columns if col in df.columns]\n","\n","print(f\"Dataset overview:\")\n","print(f\"- Total rows: {len(df)}\")\n","print(f\"- Total columns: {len(df.columns)}\")\n","print()\n","\n","for col in key_columns:\n","    if col in df.columns:\n","        non_null_count = df[col].notna().sum()\n","        null_count = df[col].isna().sum()\n","        completeness = (non_null_count / len(df)) * 100\n","        print(f\"{col}:\")\n","        print(f\"  - Non-null values: {non_null_count}/{len(df)} ({completeness:.1f}%)\")\n","        print(f\"  - Null values: {null_count}\")\n","\n","        # Show sample of unique values for categorical columns\n","        if col in ['country', 'company_name'] and non_null_count > 0:\n","            unique_count = df[col].nunique()\n","            print(f\"  - Unique values: {unique_count}\")\n","            if col == 'country' and unique_count <= 20:\n","                print(f\"  - Sample countries: {list(df[col].dropna().unique()[:10])}\")\n","        print()\n","    else:\n","        print(f\"{col}: Column not found\")\n","\n","# Show potential data issues\n","print(\"Potential data issues:\")\n","if 'valuation' in df.columns:\n","    zero_valuations = (df['valuation'] == 0).sum()\n","    if zero_valuations > 0:\n","        print(f\"- {zero_valuations} companies with zero valuation\")\n","\n","if 'arr' in df.columns:\n","    zero_arr = (df['arr'] == 0).sum()\n","    if zero_arr > 0:\n","        print(f\"- {zero_arr} companies with zero ARR\")\n","\n","# Sample of actual data for verification\n","if len(df) > 0:\n","    print(f\"\\nSample of raw data (first 3 rows):\")\n","    sample_cols = [col for col in ['company_name', 'valuation', 'arr', 'country'] if col in df.columns]\n","    if sample_cols:\n","        print(df[sample_cols].head(3).to_string(index=False))\n","    else:\n","        print(\"No key columns found for sample display\")\n","        print(f\"Available columns: {list(df.columns)}\")\n","        print(df.head(3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XkN8FTiWa4vo","executionInfo":{"status":"ok","timestamp":1749300381685,"user_tz":-60,"elapsed":62,"user":{"displayName":"Raymond Fafi","userId":"10559011150651827011"}},"outputId":"00df5b7e-100d-46d3-f759-223265a12250"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["DataFrame info: 87 rows, 11 columns\n","Available columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","============================================================\n","TOP 5 MOST VALUABLE SAAS COMPANIES\n","============================================================\n","Companies with valuation data: 87\n","\n","1. Oracle                         $350.00B\n","2. Adobe                          $240.00B\n","3. Salesforce                     $227.80B\n","4. SAP                            $215.00B\n","5. Intuit                         $180.00B\n","\n","Raw data:\n","company_name    valuation\n","      Oracle 3.500000e+11\n","       Adobe 2.400000e+11\n","  Salesforce 2.278000e+11\n","         SAP 2.150000e+11\n","      Intuit 1.800000e+11\n","\n","============================================================\n","TOP 5 COMPANIES BY ARR\n","============================================================\n","Companies with ARR data: 87\n","\n","1. Oracle                         $52.90B\n","2. Salesforce                     $37.90B\n","3. SAP                            $32.50B\n","4. Square                         $19.70B\n","5. Adobe                          $19.40B\n","\n","Raw data:\n","company_name          arr\n","      Oracle 5.290000e+10\n","  Salesforce 3.790000e+10\n","         SAP 3.250000e+10\n","      Square 1.970000e+10\n","       Adobe 1.940000e+10\n","\n","============================================================\n","TOP COUNTRIES BY NUMBER OF COMPANIES\n","============================================================\n","Column 'country' not found in dataset\n","Available columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","\n","============================================================\n","DATA QUALITY SUMMARY\n","============================================================\n","Dataset overview:\n","- Total rows: 87\n","- Total columns: 11\n","\n","company_name:\n","  - Non-null values: 87/87 (100.0%)\n","  - Null values: 0\n","  - Unique values: 87\n","\n","valuation:\n","  - Non-null values: 87/87 (100.0%)\n","  - Null values: 0\n","\n","arr:\n","  - Non-null values: 87/87 (100.0%)\n","  - Null values: 0\n","\n","country: Column not found\n","Potential data issues:\n","\n","Sample of raw data (first 3 rows):\n","company_name    valuation          arr\n","  Salesforce 2.278000e+11 3.790000e+10\n","       Adobe 2.400000e+11 1.940000e+10\n","      Oracle 3.500000e+11 5.290000e+10\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","\n","# Check if required libraries and dataframe exist\n","try:\n","    print(f\"DataFrame shape: {df.shape}\")\n","    print(f\"Available columns: {list(df.columns)}\")\n","except NameError:\n","    print(\"Error: DataFrame 'df' not found. Please run the data loading code first.\")\n","    raise\n","\n","# Set up plotting style\n","plt.style.use('default')\n","sns.set_palette(\"husl\")\n","\n","# 1. TOP 10 COUNTRIES BAR CHART\n","print(\"=\" * 50)\n","print(\"CREATING TOP COUNTRIES CHART\")\n","print(\"=\" * 50)\n","\n","if 'country' in df.columns:\n","    # Clean country data\n","    country_data = df[df['country'].notna()].copy()\n","\n","    if len(country_data) > 0:\n","        top_countries = country_data['country'].value_counts().head(10)\n","        print(f\"Countries with data: {len(country_data)} companies\")\n","        print(f\"Top countries: {dict(top_countries)}\")\n","\n","        # Create the plot\n","        plt.figure(figsize=(12, 8))\n","        ax = top_countries.plot(kind='barh',\n","                               title='Top 10 Countries by Number of SaaS Companies',\n","                               color='skyblue',\n","                               edgecolor='navy')\n","\n","        # Improve the plot\n","        plt.title('Top 10 Countries by Number of SaaS Companies', fontsize=16, pad=20)\n","        plt.xlabel('Number of Companies', fontsize=12)\n","        plt.ylabel('Country', fontsize=12)\n","\n","        # Add value labels on bars\n","        for i, v in enumerate(top_countries.values):\n","            ax.text(v + 0.1, i, str(v), va='center', ha='left', fontweight='bold')\n","\n","        # Add grid for better readability\n","        plt.grid(axis='x', alpha=0.3)\n","        plt.tight_layout()\n","        plt.show()\n","\n","    else:\n","        print(\"No valid country data found for plotting.\")\n","\n","else:\n","    print(\"Error: 'country' column not found in dataset\")\n","    print(\"Available columns:\", list(df.columns))\n","    # Try to find similar column names\n","    import difflib\n","    possible_matches = difflib.get_close_matches('country', df.columns, n=3, cutoff=0.6)\n","    if possible_matches:\n","        print(f\"Possible matches: {possible_matches}\")\n","\n","print(\"\\n\" + \"=\" * 50)\n","print(\"CREATING VALUATION VS ARR SCATTER PLOT\")\n","print(\"=\" * 50)\n","\n","# 2. VALUATION VS ARR SCATTER PLOT\n","if 'arr' in df.columns and 'valuation' in df.columns:\n","    # Clean data for scatter plot\n","    scatter_data = df[(df['arr'].notna()) & (df['valuation'].notna())].copy()\n","\n","    if len(scatter_data) >= 2:  # Need at least 2 points\n","        print(f\"Companies with both ARR and Valuation data: {len(scatter_data)}\")\n","        print(f\"ARR range: ${scatter_data['arr'].min()/1e6:.1f}M to ${scatter_data['arr'].max()/1e6:.1f}M\")\n","        print(f\"Valuation range: ${scatter_data['valuation'].min()/1e6:.1f}M to ${scatter_data['valuation'].max()/1e6:.1f}M\")\n","\n","        # Create the scatter plot\n","        plt.figure(figsize=(12, 8))\n","\n","        # Basic scatter plot\n","        sns.scatterplot(data=scatter_data, x='arr', y='valuation',\n","                       alpha=0.7, s=80, color='coral')\n","\n","        # Improve the plot\n","        plt.title('Valuation vs ARR', fontsize=16, pad=20)\n","        plt.xlabel('ARR (USD)', fontsize=12)\n","        plt.ylabel('Valuation (USD)', fontsize=12)\n","\n","        # Format axes to show values in millions/billions\n","        ax = plt.gca()\n","\n","        # Format x-axis (ARR)\n","        x_max = scatter_data['arr'].max()\n","        if x_max >= 1e9:\n","            ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e9:.1f}B'))\n","        else:\n","            ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.0f}M'))\n","\n","        # Format y-axis (Valuation)\n","        y_max = scatter_data['valuation'].max()\n","        if y_max >= 1e9:\n","            ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e9:.1f}B'))\n","        else:\n","            ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.0f}M'))\n","\n","        # Add trend line if we have enough points\n","        if len(scatter_data) >= 5:\n","            # Calculate and plot trend line\n","            z = np.polyfit(scatter_data['arr'], scatter_data['valuation'], 1)\n","            p = np.poly1d(z)\n","            plt.plot(scatter_data['arr'], p(scatter_data['arr']), \"r--\", alpha=0.8, linewidth=2)\n","\n","            # Calculate correlation\n","            correlation = scatter_data['arr'].corr(scatter_data['valuation'])\n","            plt.text(0.05, 0.95, f'Correlation: {correlation:.3f}',\n","                    transform=ax.transAxes, bbox=dict(boxstyle=\"round\", facecolor='wheat', alpha=0.8))\n","\n","        # Add grid\n","        plt.grid(True, alpha=0.3)\n","        plt.tight_layout()\n","        plt.show()\n","\n","        # Print some statistics\n","        print(f\"\\nStatistics:\")\n","        print(f\"Correlation coefficient: {scatter_data['arr'].corr(scatter_data['valuation']):.3f}\")\n","        print(f\"Average ARR: ${scatter_data['arr'].mean()/1e6:.1f}M\")\n","        print(f\"Average Valuation: ${scatter_data['valuation'].mean()/1e6:.1f}M\")\n","\n","    else:\n","        print(f\"Insufficient data for scatter plot. Found {len(scatter_data)} valid data points (need at least 2)\")\n","\n","else:\n","    missing_cols = []\n","    if 'arr' not in df.columns:\n","        missing_cols.append('arr')\n","    if 'valuation' not in df.columns:\n","        missing_cols.append('valuation')\n","\n","    print(f\"Error: Missing required columns: {missing_cols}\")\n","    print(\"Available columns:\", list(df.columns))\n","\n","    # Try to find similar column names\n","    import difflib\n","    for missing_col in missing_cols:\n","        possible_matches = difflib.get_close_matches(missing_col, df.columns, n=3, cutoff=0.6)\n","        if possible_matches:\n","            print(f\"Possible matches for '{missing_col}': {possible_matches}\")\n","\n","# 3. DATA QUALITY CHECK\n","print(\"\\n\" + \"=\" * 50)\n","print(\"DATA QUALITY SUMMARY\")\n","print(\"=\" * 50)\n","\n","required_columns = ['country', 'arr', 'valuation']\n","for col in required_columns:\n","    if col in df.columns:\n","        total_rows = len(df)\n","        non_null_rows = df[col].notna().sum()\n","        null_rows = df[col].isna().sum()\n","        completeness = (non_null_rows / total_rows) * 100\n","\n","        print(f\"{col.upper()}:\")\n","        print(f\"  - Total values: {total_rows}\")\n","        print(f\"  - Non-null: {non_null_rows} ({completeness:.1f}%)\")\n","        print(f\"  - Null: {null_rows}\")\n","\n","        if col in ['arr', 'valuation'] and non_null_rows > 0:\n","            print(f\"  - Min: ${df[col].min()/1e6:.1f}M\")\n","            print(f\"  - Max: ${df[col].max()/1e6:.1f}M\")\n","            print(f\"  - Mean: ${df[col].mean()/1e6:.1f}M\")\n","        print()\n","\n","# Show sample data for verification\n","print(\"Sample data (first 5 rows):\")\n","sample_cols = [col for col in ['country', 'arr', 'valuation'] if col in df.columns]\n","if sample_cols:\n","    print(df[sample_cols].head().to_string(index=False))\n","else:\n","    print(\"No required columns found\")\n","    print(\"All available data:\")\n","    print(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"cUMpFdq4blxo","executionInfo":{"status":"ok","timestamp":1749300539473,"user_tz":-60,"elapsed":854,"user":{"displayName":"Raymond Fafi","userId":"10559011150651827011"}},"outputId":"9106076a-57c8-4371-df78-21177ec2e9bc"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["DataFrame shape: (87, 11)\n","Available columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","==================================================\n","CREATING TOP COUNTRIES CHART\n","==================================================\n","Error: 'country' column not found in dataset\n","Available columns: ['company_name', 'founded_year', 'hq', 'industry', 'total_funding', 'arr', 'valuation', 'employees', 'top_investors', 'product', 'g2_rating']\n","\n","==================================================\n","CREATING VALUATION VS ARR SCATTER PLOT\n","==================================================\n","Companies with both ARR and Valuation data: 87\n","ARR range: $100.0M to $52900.0M\n","Valuation range: $1050.0M to $350000.0M\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Statistics:\n","Correlation coefficient: 0.927\n","Average ARR: $3468.1M\n","Average Valuation: $33209.8M\n","\n","==================================================\n","DATA QUALITY SUMMARY\n","==================================================\n","ARR:\n","  - Total values: 87\n","  - Non-null: 87 (100.0%)\n","  - Null: 0\n","  - Min: $100.0M\n","  - Max: $52900.0M\n","  - Mean: $3468.1M\n","\n","VALUATION:\n","  - Total values: 87\n","  - Non-null: 87 (100.0%)\n","  - Null: 0\n","  - Min: $1050.0M\n","  - Max: $350000.0M\n","  - Mean: $33209.8M\n","\n","Sample data (first 5 rows):\n","         arr    valuation\n","3.790000e+10 2.278000e+11\n","1.940000e+10 2.400000e+11\n","5.290000e+10 3.500000e+11\n","3.250000e+10 2.150000e+11\n","1.440000e+10 1.800000e+11\n"]}]}]}